base {
    archivesName = "${mod_id}-fabric"
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings "net.fabricmc:yarn:${yarn_version}:v2"
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"
    implementation project(path: ":common", configuration: "namedElements")

    modImplementation("nl.enjarai:cicada-lib:${project.cicada_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }

    modImplementation("dev.isxander:yet-another-config-lib:${project.yacl_version}-fabric") {
        exclude group: "net.fabricmc"
    }

    modCompileOnly("dev.isxander:controlify:${project.controlify_version}-fabric") {
        exclude group: "net.fabricmc"
        exclude group: "maven.modrinth"
        exclude group: "com.github.CaffeineMC"
    }

    // Mod Menu integration.
    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    implementation(include("com.github.bawnorton.mixinsquared:mixinsquared-fabric:${project.mixin_squared_version}"))

    include(modImplementation("me.lucko:fabric-permissions-api:${project.permissions_api_version}"))
}

loom {
    if (project(":common").file("src/main/resources/${mod_id}.accesswidener").exists()) {
        accessWidenerPath.set(project(":common").file("src/main/resources/${mod_id}.accesswidener"))
    }
    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

sourceSets.main.resources.srcDir 'src/main/generated'

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
}
tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}
tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}

processResources {
    from project(":common").sourceSets.main.resources
}

publishing {
    repositories {
        maven {
            name = "enjaraiMaven"
            url = "https://maven.enjarai.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = rootProject.property('group')
            artifactId = "do-a-barrel-roll"
            version = "${project.version}-fabric"

            from components.java
        }
    }
}

publishMods {
    file = remapJar.archiveFile
    displayName = "${property('mod_version')} for Fabric ${property('minecraft_version')}"
    version = "${project.version}-fabric"
    changelog = getRootProject().file("CHANGELOG.md").text
    type = STABLE
    modLoaders.add("fabric")

    def min = property('publish_target_min')
    def max = property('publish_target_max')

    if (providers.gradleProperty('enjaraiModrinthToken').present) {
        modrinth {
            projectId = property('mod_modrinth')
            accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

            if (min == max) {
                minecraftVersions.add(min)
            } else {
                minecraftVersionRange {
                    start = min
                    end = max
                }
            }

            requires {
                slug = "fabric-api"
            }
            embeds {
                slug = "cardinal-components-api"
            }
            requires {
                slug = "cicada"
            }
        }
    }

    if (providers.gradleProperty('enjaraiCurseforgeToken').present) {
        curseforge {
            projectId = property('mod_curseforge')
            accessToken = providers.gradleProperty('enjaraiCurseforgeToken').get()

            if (min == max) {
                minecraftVersions.add(min)
            } else {
                minecraftVersionRange {
                    start = min
                    end = max
                }
            }

            requires {
                slug = "fabric-api"
            }
            embeds {
                slug = "cardinal-components-api"
            }
            requires {
                slug = "cicada"
            }
        }
    }

    if (providers.gradleProperty('enjaraiGithubToken').present) {
        github {
            repository = property('mod_github')
            accessToken = providers.gradleProperty('enjaraiGithubToken').get()

            commitish = property('git_branch')
            tagName = "${project.version}-fabric"
        }
    }
}
